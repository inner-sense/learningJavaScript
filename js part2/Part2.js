//{Занятие 1}
	// Для решения задач вам потребуются знания об арифметических операциях: +, -, *, /, %, инкременте и декременте, а также, возможно, методы округления чисел Math.trunc(), Math.floor(), Math.round(), number.toFixed() и т.д.

	// Оператор сложения + возвращает сумму числовых операндов или объединяет строки.
	// Оператор вычитания - вычитает один операнд из другого и возвращает разницу.
	// Оператор деления / производит деление его операндов, где левый операнд - делимый, а правый - делитель.
	// Оператор умножения * возвращает произведение операндов.
	// Оператор остаток от деления % возвращает целый остаток от деления левого операнда на правый. Возвращаемое значение всегда получает знак делимого, а не делителя.
	// Оператор возведения в степень ** возвращает результат возведения первого операнда в степень. Он право ассоциативен (означает, что действия выполняются справа налево): a ** b ** c равно a ** (b ** c).
	// Операция инкремента ++ возвращает операнд, увеличенный на единицу. Если операция используется как постфикс, с оператором после операнда (например, x++), значение операнда возвращается, а затем увеличивается на единицу. Если используется префиксная форма с оператором перед операндом (например, ++x), значение операнда возвращается увеличенным на единицу.
	// Операция декремента -- уменьшает на единицу свой операнд и возвращает получившееся значение. Если операция используется как постфикс (например, x--), значение операнда возвращается, а затем уменьшается на единицу. Если используется префиксная форма (например, --x), значение операнда возвращается уменьшенным на единицу.
	// Унарный минус - ставится перед своим операндом и возвращает его математическое отрицание.
	// Оператор унарный плюс + предшествует своему операнду и оценивает его, пытается преобразовать его в число, если он им не является.
	// Пример функции:
	// function multiply(number) {
	//   let result = number * 2;
	//   return result;
	// }
// _______________________________________________________________________________

//{Занятие 2}
	// В JavaScript есть восемь основных типов данных:
	// number (числа и специальные значения: Infinity, -Infinity и NaN);
	// let age = 27;  // "number"
	// let n = 12.345;
	// bigint - числа произвольной длины. Bigint создается путем добавления n в конец целочисленного литерала:
	// // the "n" at the end means it's a BigInt
	// const bigInt = 1234567890123456789012345678901234567890n;  // "bigint"
	// string (строки, заключенные в кавычки);
	// let name =  'Alice'; // "string"
	// let city = "Miami";
	// boolean (булевый, или логический тип, принимает значения true или false);
	// let isEven = true;  // "boolean"
	// let isAdult = age >= 18;
	// null («ничего», «пусто» или «значение неизвестно»);
	// let job = null; // "object" (официальная ошибка в языке)
	// undefined («значение не было присвоено»);
	// let a;  //"undefined"
	// let b = undefined;
	// object (объект, для хранения более сложных структур данных: массивы, объекты, даты)
	// const array = [1, 2, 3];  // "object"
	// let obj = {name: "Bob"}; // "object"
	// let data = new Date(); // "object"
	// symbol (для уникальных идентификаторов)
	// let id = Symbol("id"); // "symbol"
	// Определение типа данных

	// Оператор typeof a, или typeof(a), позволяет узнать, какой тип данных содержится в переменной а.
	// let name = 'Alice';
	// let age = 25;
	// console.log(typeof name); // "string"
	// console.log(typeof(age)); // "number"

	// Пример использования:
	// if (typeof a === 'number') {
	//   return a * 2;
	// } else { 
	//   return 'Error';
	// }
// _______________________________________________________________________________