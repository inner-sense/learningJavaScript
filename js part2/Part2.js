//{Занятие 1}
	// Для решения задач вам потребуются знания об арифметических операциях: +, -, *, /, %, инкременте и декременте, а также, возможно, методы округления чисел Math.trunc(), Math.floor(), Math.round(), number.toFixed() и т.д.

	// Оператор сложения + возвращает сумму числовых операндов или объединяет строки.
	// Оператор вычитания - вычитает один операнд из другого и возвращает разницу.
	// Оператор деления / производит деление его операндов, где левый операнд - делимый, а правый - делитель.
	// Оператор умножения * возвращает произведение операндов.
	// Оператор остаток от деления % возвращает целый остаток от деления левого операнда на правый. Возвращаемое значение всегда получает знак делимого, а не делителя.
	// Оператор возведения в степень ** возвращает результат возведения первого операнда в степень. Он право ассоциативен (означает, что действия выполняются справа налево): a ** b ** c равно a ** (b ** c).
	// Операция инкремента ++ возвращает операнд, увеличенный на единицу. Если операция используется как постфикс, с оператором после операнда (например, x++), значение операнда возвращается, а затем увеличивается на единицу. Если используется префиксная форма с оператором перед операндом (например, ++x), значение операнда возвращается увеличенным на единицу.
	// Операция декремента -- уменьшает на единицу свой операнд и возвращает получившееся значение. Если операция используется как постфикс (например, x--), значение операнда возвращается, а затем уменьшается на единицу. Если используется префиксная форма (например, --x), значение операнда возвращается уменьшенным на единицу.
	// Унарный минус - ставится перед своим операндом и возвращает его математическое отрицание.
	// Оператор унарный плюс + предшествует своему операнду и оценивает его, пытается преобразовать его в число, если он им не является.
	// Пример функции:
	// function multiply(number) {
	//   let result = number * 2;
	//   return result;
	// }
// _______________________________________________________________________________

//{Занятие 2}
	// В JavaScript есть восемь основных типов данных:
	// number (числа и специальные значения: Infinity, -Infinity и NaN);
	// let age = 27;  // "number"
	// let n = 12.345;
	// bigint - числа произвольной длины. Bigint создается путем добавления n в конец целочисленного литерала:
	// // the "n" at the end means it's a BigInt
	// const bigInt = 1234567890123456789012345678901234567890n;  // "bigint"
	// string (строки, заключенные в кавычки);
	// let name =  'Alice'; // "string"
	// let city = "Miami";
	// boolean (булевый, или логический тип, принимает значения true или false);
	// let isEven = true;  // "boolean"
	// let isAdult = age >= 18;
	// null («ничего», «пусто» или «значение неизвестно»);
	// let job = null; // "object" (официальная ошибка в языке)
	// undefined («значение не было присвоено»);
	// let a;  //"undefined"
	// let b = undefined;
	// object (объект, для хранения более сложных структур данных: массивы, объекты, даты)
	// const array = [1, 2, 3];  // "object"
	// let obj = {name: "Bob"}; // "object"
	// let data = new Date(); // "object"
	// symbol (для уникальных идентификаторов)
	// let id = Symbol("id"); // "symbol"
	// Определение типа данных

	// Оператор typeof a, или typeof(a), позволяет узнать, какой тип данных содержится в переменной а.
	// let name = 'Alice';
	// let age = 25;
	// console.log(typeof name); // "string"
	// console.log(typeof(age)); // "number"

	// Пример использования:
	// if (typeof a === 'number') {
	//   return a * 2;
	// } else { 
	//   return 'Error';
	// }
// _______________________________________________________________________________


//{Занятие 3}
	// Всего есть три преобразования:
		// Преобразование в строку.
		// Преобразование в число.
		// Преобразование к логическому значению.
	// Преобразование в строку
		// Можно осуществить преобразование значения в строку явным вызовом String(value).
	// Также для явного преобразования применяется оператор +, у которого один из аргументов – строка. В этом случае он приводит к строке и другой аргумент. Т.е. для преобразования числа в строку можно просто выполнить операцию слияния этого числа с пустой строкой.
	// Преобразование в число
		// Для преобразования к числу в явном виде можно вызвать Number(value). Например:
			// console.log(Number('ac')); // NaN
			// console.log(Number(undefined)); // NaN
			// console.log(Number(null)); // 0
			// console.log(Number(true)); // 1
			// console.log(Number('17*4')); // NaN
		// Для преобразования к числу также можно поставить перед выражением унарный плюс +:
			// console.log(+'ac'); // NaN
			// console.log(+''); // 0  
			// console.log(+undefined); // NaN
			// console.log(+null); // 0
	// Математические операции, исключая бинарный плюс, преобразуют примитив к числу:
		// console.log("2" + 3); //"23" (исключение - бинарный плюс)
		// console.log("1" * 1); // 1
		// console.log("1" / 4); // 0.25
	// Внимание!!! Если выполнять арифметические действия со строкой, которая содержат символы, отличные от цифр, получается результат NaN. console.log('a' * 3); //NaN
	// Преобразование в логическое (boolean) значение
		// Для явного преобразования используется двойное логическое отрицание !!value или вызов Boolean(value).
		// 0, пустая строка (''), null, undefined, NaN становятся false при преобразовании в логическое значение.
		// Остальное, в том числе и любые объекты, – true.
			// console.log(Boolean(5)); // true
			// console.log(Boolean('abc')); // true
			// console.log(Boolean([])); // true
			// console.log(Boolean({})); // true
			// console.log(Boolean('0')); // true
		// Преобразование в логическое (булевое) значение с помощью двойного логического отрицания !!:


	// Часто при решении задач нам необходимо использовать математические функции: модуль, корень квадратный, синус, косинус, возведение в степень, округление числа и др. Объект Math является встроенным объектом, хранящим в своих свойствах и методах различные математические константы и функции. Одно из популярных свойств Math.PI – представляет отношение длины окружности круга к его диаметру, приблизительно равное 3,14159 (всем известное число Пи).
	// Наиболее часто применяются следующие методы объекта Math:
		// Math.abs(x) возвращает абсолютное значение числа x;
		// Math.cos(x) возвращает косинус числа x (x – значение в радианах);
		// Math.sin(x) возвращает синус числа x (x – значение в радианах);
		// Math.atan() возвращает арктангенс числа (в радианах);
		// Math.sqrt(x) возвращает квадратный корень числа x. Если число отрицательное, то вернется NaN;
		// Math.pow(x, y) возвращает x в степени y;
		// Math.floor(x) округление вниз. Округляет аргумент x до ближайшего меньшего целого;
		// Math.ceil(x) округление вверх. Округляет аргумент x до ближайшего большего целого;
		// Math.round(x) возвращает число, округлённое к ближайшему целому;
		// Math.trunc(x) возвращает целую часть числа путём удаления всех дробных знаков;
		// Math.max(x, y, ..., ) возвращает наибольшее из нуля или более чисел;
		// Math.min(x,y, ..., ) возвращает наименьшее из нуля или более чисел;
		// Math.random() возвращает псевдослучайное число с плавающей запятой из диапазона [0, 1), то есть, от 0 (включительно) до 1 (но не включая 1).

	// Метод Number.toFixed() форматирует число, используя запись с фиксированной запятой.Синтаксис:
		// numObj.toFixed([digits])
		// Возвращаемое значение: строка, представляющая число numObj и содержащая ровно digits цифр после десятичной запятой.
		// Пример:
		// let x = 5.534;
		// console.log(x.toFixed(0)); // "6"
		// console.log(x.toFixed(1)); // "5.5"
// _______________________________________________________________________________


//{Занятие 3}
	// Часто возникает необходимость выполнить разные действия при выполнении разных условий. Условия используются в операторах ветвления if else, в тернарном операторе и в циклах for, while, do while.
	// Условие – это логическое (булево) выражение, которое может принимать значения true (истинно) или false (ложно). Условие состоит из двух выражений, соединенных операциями сравнения: > (больше), < (меньше), <= (меньше или равно), >= (больше или равно), === (строгое равенство – по типу и значению), == (нестрогое равенство – по значению), !== (строгое неравенство), != (нестрогое неравенство).
	// Например:
		// let x = 5;
		// console.log(x >= 0); // true  (величина x неотрицательна)
		// console.log(x < 0); // false (величина х не является отрицательной)
		// console.log(15 == '15'); // true (величина равны по значению, но не по типу)
		// console.log(15 === 3 * 5); // true (величины равны по типу и значению)
		// console.log(15 !== '15'); // true (число 15 не равно строке ‘15’)
	// Составные условия – это условия, которые состоят из двух или более простых условий, соединенных с помощью логических операторов И (&&), ИЛИ (||) и НЕ (!). И (&&) используется в тех случаях, когда нужно проверить на истинность более одного условия.
		// if (условие && условие) {
		//   действие
		// }
	// ИЛИ (||) используется тогда, когда мы хотим проверить на истинность хотя бы одно из двух и более условий.
		// if (условие || условие) {
		//   действие
		// }
	// НЕ (!) используется для отрицания.
		// if ( !(условие) ) {
		//   действие
		// }
	// Пример. Запишем на языке JavaScript условия:
		// typeof x !== "object" (тип переменной х – не объект)
	// JavaScript вычисляет несколько ИЛИ (||) слева направо. При этом используется так называемый «короткий цикл вычисления»: оператор || вычисляет операнды слева направо до первого «истинного» и возвращает его, а если все ложные – то последнее значение. К оператору И (&&) также применим принцип «короткого цикла вычислений»: оператор && вычисляет операнды слева направо до первого «ложного» и возвращает его, а если все истинные – то последнее значение. Приоритет оператора И (&&) больше, чем ИЛИ (||), поэтому он выполняется раньше. По своему действию оператор ИЛИ (||) напоминает арифметическое сложение, а оператор И (&&) – умножение. Недаром оператор ИЛИ (||) называют еще логическим сложением, а оператор И (&&) – логическим умножением.

// 	Ветвление – это алгоритмическая конструкция, в которой в зависимости от условия выполняется та или иная последовательность действий. Команда ветвления (условный оператор) имеет следующий формат:
			// if (условие) {
			//    инструкция1;
			// } else {
			//    инструкция2;
			// }
		// При выполнении команды ветвления сначала проверяется условие. Если оно истинно, то выполняется инструкция 1, если условие ложно, то выполняется инструкция 2.
		// Часть else может отсутствовать:
			// if (условие) {
			//    инструкция;
			// } 
		// В случае сокращенной формы команды инструкция выполняется только тогда, когда условие истинно.
		// Если мы хотим выполнить более одной инструкции, то нужно заключить блок кода в фигурные скобки. Если выполняется одна инструкция, фигурные скобки можно опустить.
			// Пример:
			// if (a > 0) return 'positive'; 
			// else return 'not positive';

// 			Высказывание, которое состоит из двух утверждений А и В, соединенных логической операцией И (&&) , считается истинным только тогда, когда оба утверждения А и В истинны, и ложным, если хотя бы одно из них ложно. Оператор И (&&) работает следующим образом: если хотя бы один из аргументов false, то возвращает false; если все аргументы true, возвращается true. Если логический оператор ИЛИ (||) "ищет" первое истинное утверждение (true) в ряду, то логический оператор И (&&), наоборот, работает до тех пор, пока не встретит первое ложное утверждение (false). 
 
//  Высказывание, которое состоит из двух высказываний А и В, соединенных логической операцией ИЛИ (||), считается истинным, если хотя бы одно из высказываний А или В истинно, и ложным, если они оба ложны. Логический оператор ИЛИ (||) может применяться к значениям любого типа и возвращать также значение любого типа. Этот оператор работает следующим образом: если хотя бы один из аргументов true, то возвращает true, иначе – false.

// Оператор НЕ (!) – логический оператор, который получает только один аргумент, преобразовывает его к логическому типу (boolean), затем возвращает противоположное значение. 
// Исходя из вышесказанного, двойное НЕ (!!) можно использовать для преобразования значений к логическому типу:
// console.log( !!'abc' ); // true
// console.log( !!null ); // false
// console.log( !!5  ); // true
// // _______________________________________________________________________________
			