// ({1}Занятие)

// console.log('Hello world!')

// Пример 1. Напечатать в консоли название вашего города.
// console.log('St. Petersburg');
// Пример 2. Напечатать свое имя, затем закомментировать эту строку.
// console.log('Andrew');
// Пример 3. Напечатать несколько строк стихотворения.
// 1 способ
// console.log('Let it snow!');
// console.log('Let it snow!');
// console.log('Let it snow!');
// 2 способ
// console.log('Let it snow!\nLet it snow!\nLet it snow!');
//\n - символ переноса строки


// Переменная – это «именованное хранилище» для данных. Для создания переменной в JavaScript используют ключевое слово let (также есть const и устаревшее var). В переменную можно поместить значение с помощью оператора присваивания =. Для вывода значения переменной в консоль используется команда console.log();

// let telNumber = 123456;
// let name = 'Andrew';
// console.log(telNumber);
// console.log(name);

// Переменную можно создать, не присваивая ей значение. Например, 
//let telNumber; 
// Если не присвоить никакого значения, то в переменной будет значение undefined установлено по умолчанию.
// let telNumber;           // задаем переменную telNumber без присваивания ей значения
// telNumber = 15058768956; // значение переменной telNumber изменено  
// console.log(telNumber);  // в консоль будет выведено 15058768956

// Переменные, созданные с помощью ключевого слова let, можно переопределить, т.е. присвоить переменной новое значение. При присваивании переменной нового значения ключевое слово let использовать не надо.
// let num = 5;                   // переменной num присвоено значение 5
// console.log(num);              // в консоль будет выведено 5
// num = num + 4;                 // значение переменной num увеличено на 4
// console.log(num);              // в консоль будет выведено 9

// let str = 'Have a nice day!';  // переменной str присвоено значение 'Have a nice day!'
// str = 'Have a great day!';     // значение переменной str изменено  
// console.log(str);              // в консоль будет выведено "Have a great day!"

// Для краткости кода можно объявлять переменные в одну строку, например:
// let num = 5, newNum = 15, oldNum = 10; // переменной num присвоено значение 5, переменной newNum присвоено значение 15, переменной oldNum присвоено значение 10; перечисление переменных происходит через запятую
// console.log(num, newNum, oldNum);      // в консоль будет выведено 5, 15 и 10
//Объявление переменных в одну строку не рекомендуется, так как это затрудняет читаемость кода. Объявляйте каждую переменную в отдельной строке.

// Чтобы объявить константу, т.е. неизменяемую переменную (read only), используют const вместо let. Константы нельзя изменить. Попытка изменить константу приведёт к ошибке.
// При создании константы значение переменной присваивается сразу
// Если при создании константы не определить ее значение, это приведет к ошибке.

// Если вы не планируете изменять значение переменной в программе, используйте const. Если значение переменной в программе будет меняться – используйте let.

// Ключевые слова let и const имеют сходства и различия между собой. Переменная, заданная с их помощью, будет "читаться" на странице только в пределах блока, где эта переменная была задана.



// ----------------------------------------------------------------------
// ({2}Занятие)

// let и const имеют блочную область видимости (видны только после объявления и только в текущем блоке).

// {
//   let a = 100;
//   const b = 200;
// }
// console.log(a, b); // попытка вывести значения переменных в консоль выдаст ошибку "ReferenceError"

// {
//   let a = 100;
//   const b = 200;
//   console.log(a, b); // в консоль будет выведено 100 и 200
// }

// let и const нельзя объявлять повторно в одном блоке.
// {
//   let a = 100;
//   let a = 200; // повторно объявляем переменную a 
//   console.log(a); // при попытке вывести значение переменной a в консоль будет получена ошибка "SyntaxError"
// }

// {
//   let b = 100;
//   const b = 200; // приведет к ошибке "SyntaxError"
// }
// let b = 300;
// b = 400;
// console.log(b); // в консоль будет выведено 400 

// Переменные var не имеют блочной области видимости, они ограничены телом функции.
// {
//   var a = 10;
// }
// a = 100;
// console.log(a); // в консоль будет выведено 100

// {
//   var a = 10;
//   let b = 100;
//   const c = 1000;  
// }
// let b = 500;
// const c = 700;
// console.log(a, b, c); // в консоль будет выведено 10, 500 и 700

// Обычно var не используется в современных скриптах.
// Блочная область видимости – это удобно. Поэтому много лет назад let и const были введены в стандарт и сейчас являются основным способом объявления переменных.



// На разных проектах правила именования переменных могут слегка варьироваться, но основные требования, обеспечивающие лучшую "читаемость кода" следующие:
// 1) Осмысленное название, отображающее суть данных, хранящихся в переменной.
// 2) Использование имен в стиле camelCase - стиль написания составных слов, при котором несколько слов пишутся слитно без пробелов, при этом каждое слово внутри фразы пишется с прописной буквы. Стиль получил название camelCase, поскольку прописные буквы внутри слова напоминают горбы верблюда.
// 3) Использование английского языка (не транслита!), цифр (но не в начале имени!), знака подчеркивания _ и доллара $.
// 4) Нелатинские буквы разрешены, но не рекомендуются. Можно использовать любой язык, включая кириллицу. Имена с использованием русских букв разрешены, но есть международная традиция использовать английский язык в именах переменных.
// 5) Существует также список зарезервированных слов в JavaScript, которые нельзя употреблять в качестве имен переменных. Взять хотя бы ключевое слово let.Примеры неправильного именования переменных:
		// const const;              // const - зарезервированное слово, его нельзя использовать в качестве переменной
		// const null = 0;           // null - зарезервированное слово, его нельзя использовать в качестве переменной 
		// let var = 100.99;         // var - зарезервированное слово, его нельзя использовать в качестве переменной 
		// let knigi = 500;          // нельзя использовать транслит в названии переменной
		// let 12month = 'December'; // нельзя начинать имя переменной с цифры
		// let sumofnumbers = a + b; // должен применяться стиль camelCase: когда после первого слова каждое последующее слово пишется с прописной буквы 
		// let tov = 100 ;           // давайте переменной понятное имя, таким образом другим разработчикам будет удобно работать с вашим кодом


// в переменную можно поместить значение с помощью оператора присваивания – знака "равно" (=). Сначала выполняется правая часть кода, затем – левая (присваивание значения переменной):

// Например:
// let a = 5;       // переменной a присвоено значение 5
// a = a + 5;       // значение переменной a увеличено на 5
// a = a * 5;       // значение переменной a увеличено в 5 раз
// a = a / 10 + 20; // значение переменной a уменьшилось в 10 раз, затем увеличилось на 20
// console.log(a);  // в итоге всех изменений в консоль будет выведено 25

// let str = 'Hello';      // переменной str присвоено значение 'Hello'
// str = str + ' world!';  // значение переменной str изменено
// console.log(str);       // в консоль будет выведено "Hello world!"



// ----------------------------------------------------------------------
// ({3}Занятие)

// Переменная в JavaScript может содержать любые данные. В один момент там может быть строка, а в другой – число:
// let message = 'Hello';
// message = 123456;
// При создании переменной тип переменной не указывается. Языки программирования, в которых такое возможно, называются «динамически типизированными». Это значит, что типы данных есть, но переменные не привязаны ни к одному из них.
// Оператор typeof a или typeof(a) позволяет узнать, какой тип данных содержится в переменной а.

// let c = a + b; 
// console.log(typeof c);          // "number"
// c = a < b; 
// console.log(typeof(c));         // "boolean"
// console.log(typeof typeof(c));  // "string"
// c = 'QA Basics'; 
// console.log(typeof(c));         // "string"

// console.log(typeof 'Hello!');        // "string"
// console.log(typeof null);            // "object", это официально признанная ошибка в JavaScript
// let arr = [];
// console.log(typeof arr);             // "object"
// let functionForAll = ()=>{};
// console.log(typeof functionForAll);  // "function"
// let newObj = {};
// console.log(typeof(newObj));         // "object"